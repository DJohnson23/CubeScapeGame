// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "../Includes/CubeMeshData.cginc"
#include "../Includes/ArrayUtils.cginc"
#include "../Includes/Noise3D.cginc"

struct Quad
{
    float3 a;
    float3 b;
    float3 c;
    float3 d;

    float3 normal;
    float4 color;
};

struct TerrainVoxel
{
	int active;
	float3 localPosition;
	int typeIndex;
};

struct VoxelType {
    int minHeight;
    float scale;
    float3 center;
    float4 lightCol;
    float4 darkCol;
};

RWStructuredBuffer<TerrainVoxel> voxels;
RWStructuredBuffer<VoxelType> voxelTypes;
float3 position;

uint chunkSize;

AppendStructuredBuffer<Quad> quadList;

bool IsValidCoord(uint3 index)
{
    return index.x < chunkSize && index.y < chunkSize && index.z < chunkSize
        && index.x >= 0 && index.y >= 0 && index.z >= 0;
}

static int3 _NeighborOffsets[6] =
{
    int3(0, 0, 1),
    int3(1, 0, 0),
    int3(0, 0,-1),
    int3(-1, 0, 0),
    int3(0, 1, 0),
    int3(0,-1, 0)
};

float EvaluateNoise(VoxelType voxType, float3 position) {
    return (noise(position / voxType.scale + voxType.center) + 1) * 0.5f;
}

float4 EvaluateColor(VoxelType voxType, float t) {
    return voxType.lightCol + t * (voxType.darkCol - voxType.lightCol);
}

[numthreads(10,10,10)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= chunkSize || id.y >= chunkSize || id.z >= chunkSize) {
        return;
    }

    TerrainVoxel voxel = voxels[to1D(id.x, id.y, id.z, chunkSize)];

    if (!voxel.active)
    {
        return;
    }

    float colorNoiseVal = EvaluateNoise(voxelTypes[voxel.typeIndex], voxel.localPosition + position);
    float4 color = EvaluateColor(voxelTypes[voxel.typeIndex], colorNoiseVal);
    
    for (int i = 0; i < 6; i++)
    {
        float3 faceVerts[4];
        CubeFaceVertices(faceVerts, i);
        float3 n = _CubeNormals[i];

        int3 offsetCoord = _NeighborOffsets[i];
        int3 neighborCoord = int3(id.x + offsetCoord.x, id.y + offsetCoord.y, id.z + offsetCoord.z);

        if (IsValidCoord(neighborCoord))
        {
            TerrainVoxel adjacent = voxels[to1D(neighborCoord.x, neighborCoord.y, neighborCoord.z, chunkSize)];

            if (adjacent.active)
            {
                continue;
            }
        }

        Quad newQuad;

        newQuad.a = faceVerts[0] + voxel.localPosition;
        newQuad.b = faceVerts[1] + voxel.localPosition;
        newQuad.c = faceVerts[2] + voxel.localPosition;
        newQuad.d = faceVerts[3] + voxel.localPosition;

        newQuad.normal = n;
        newQuad.color = color;

        quadList.Append(newQuad);
    }
    
}
